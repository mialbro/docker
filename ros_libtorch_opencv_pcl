
  
FROM osrf/ros:noetic-desktop-full
MAINTAINER mdrobinson@wpi.edu

#locale  # check for UTF-8
RUN apt update && apt install locales
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
RUN export LANG=en_US.UTF-8

WORKDIR /temp

ENV DEBIAN_FRONTEND=noninteractive
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install keyboard-configuration

RUN apt-get update
RUN apt install -y software-properties-common  sudo
RUN apt install -y curl 
RUN apt install -y gnupg2 
RUN apt install -y lsb-release
RUN apt-get install -y gedit python3-pip unzip wget

RUN apt-get install -y build-essential cmake git sudo

RUN apt-get update && apt install -y \
  build-essential \
  cmake \
  git \
  libbullet-dev \
  python3-colcon-common-extensions \
  python3-flake8 \
  python3-pip \
  python3-pytest-cov \
  python3-rosdep \
  python3-setuptools \
  python3-vcstool \
  wget

RUN apt install -y python3-colcon-common-extensions
RUN apt-get install -y build-essential cmake git sudo

RUN apt-get update && apt install -y \
  build-essential \
  cmake \
  git \
  libbullet-dev \
  python3-colcon-common-extensions \
  python3-flake8 \
  python3-pip \
  python3-pytest-cov \
  python3-rosdep \
  python3-setuptools \
  python3-vcstool \
  wget

RUN apt-get update
RUN apt install -y software-properties-common  sudo
RUN apt install -y curl 
RUN apt install -y gnupg2 
RUN apt install -y lsb-release
RUN apt-get install -y gedit python3-pip unzip wget

# Install OpenCV dependencies
RUN apt install -y build-essential cmake git pkg-config libgtk-3-dev \
    libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
    libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
    gfortran openexr libatlas-base-dev python3-dev python3-numpy \
    libtbb2 libtbb-dev libdc1394-22-dev libopenexr-dev \
    libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev

# Download OpenCV
ENV OPENCV_VERSION 4.5.5
RUN mkdir /opencv_build && cd /opencv_build && \
    wget -O opencv.zip https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip && \
    unzip opencv.zip && \
    mv opencv-$OPENCV_VERSION opencv && \
    rm opencv.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip && \
    unzip opencv_contrib.zip && \
    mv opencv_contrib-$OPENCV_VERSION opencv_contrib && \
    rm opencv_contrib.zip 

# Install OpenCV
RUN mkdir -p /opencv_build/opencv/build && cd /opencv_build/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D OPENCV_EXTRA_MODULES_PATH=/opencv_build/opencv_contrib/modules \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_C_EXAMPLES=ON \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D OPENCV_EXTRA_MODULES_PATH=/opencv_build/opencv_contrib/modules \
    -D BUILD_EXAMPLES=ON ..

RUN cd /opencv_build/opencv/build && make -j32 && make install
RUN apt update && apt install -y libboost-all-dev cmake libtbb-dev

# Install Eigen
RUN mkdir /eigen_build && cd /eigen_build && \
    wget -O eigen.zip https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip && \
    unzip eigen.zip && \
    cd eigen-3.4.0 && \
    mkdir build && cd build && \
    cmake .. && \
    make -j $(nproc) install

# Install GTSAM
RUN mkdir /gtsam_build && cd /gtsam_build && \
    git clone https://github.com/borglab/gtsam && cd gtsam && \
    mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DGTSAM_BUILD_TESTS=OFF \
        -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
        -DCMAKE_BUILD_TYPE=Release \
        -DGTSAM_USE_SYSTEM_EIGEN=ON \
        -DGTSAM_BUILD_UNSTABLE=ON .. && \
    make -j$(nproc) install

RUN apt-get install -y libfmt-dev

# install sophus
RUN mkdir /sophus_build && cd /sophus_build && \
    git clone https://github.com/strasdat/Sophus && \
    cd Sophus && \
    mkdir build && cd build && \
    cmake .. && \
    make -j $(nproc) && \
    make install -j $(nproc)

RUN mkdir /libtorch_build && cd /libtorch_build && \
    wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.10.2%2Bcpu.zip && \
    unzip libtorch-cxx11-abi-shared-with-deps-1.10.2+cpu.zip

#RUN apt install -y libmetis-dev && doxygen

RUN mkdir /gtsam_quadrics_build && cd /gtsam_quadrics_build && \
    git clone --recurse-submodules https://github.com/best-of-acrv/gtsam-quadrics && \
    cd gtsam-quadrics && mkdir build && cd build && \
    cmake  .. && \
    cmake --build . -j$(nproc)

# Replace 1000 with your user / group id
RUN export uid=1000 gid=1000 && \
    mkdir -p /home/developer && \
    echo "developer:x:${uid}:${gid}:Developer,,,:/home/developer:/bin/bash" >> /etc/passwd && \
    echo "developer:x:${uid}:" >> /etc/group && \
    echo "developer ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/developer && \
    chmod 0440 /etc/sudoers.d/developer && \
    chown ${uid}:${gid} -R /home/developer

RUN apt-get update -y && \
    apt-get install -y xterm gdb


RUN apt-get -y install git wget pkg-config build-essential cmake autoconf libtool zlib1g-dev lsb-release
RUN cd / && \
    git clone -j $(nproc) https://github.com/google/or-tools && \
    cd or-tools && \
    git fetch --all --tags --prune && \
    git checkout tags/v9.2 -b v9.2 && \
    cmake -S. -Bbuild  -DBUILD_DEPS:BOOL=ON && \
    cmake --build build -j$(nproc) && \
    cd build && \
    make install -j$(nproc)
